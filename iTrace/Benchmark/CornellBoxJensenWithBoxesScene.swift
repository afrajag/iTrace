/*
final class CornellBoxJensenWithBoxesScene: SceneBuilder {
    func build() -> SceneParameter? {
        var api: SunflowAPI! = SunflowAPI()
        API.shared.reset()
        var image: ImageParameter! = ImageParameter()
        image.setResolutionX(800)
        image.setResolutionY(600)
        image.setAAMin(0)
        image.setAAMax(2)
        image.setFilter(ImageParameter.FILTER_GAUSSIAN)
        image.setup(api)
        var traceDepths: TraceDepthsParameter! = TraceDepthsParameter()
        traceDepths.setDiffuse(4)
        traceDepths.setReflection(3)
        traceDepths.setRefraction(2)
        traceDepths.setup(api)
        var photons: PhotonParameter! = PhotonParameter()
        photons.setNumEmit(1_000_000)
        photons.setCaustics("kd")
        photons.setCausticsGather(100)
        photons.setCausticsRadius(0.5)
        photons.setup(api)
        var gi: InstantGIParameter! = InstantGIParameter()
        gi.setSamples(64)
        gi.setSets(1)
        gi.setBias(2.99999992421363e-05)
        gi.setBiasSamples(0)
        gi.setup(api)
        var camera: PinholeCameraParameter! = PinholeCameraParameter()
        camera.setName("camera")
        var eye: Point3! = Point3(0, -205, 50)
        var target: Point3! = Point3(0, 0, 50)
        var up: Vector3! = Vector3(0, 0, 1)
        camera.setupTransform(api, eye, target, up)
        camera.setFov(45.0)
        camera.setAspect(1.33333301544189)
        camera.setup(api)
        //  Materials
        var mirror: MirrorShaderParameter! = MirrorShaderParameter("Mirror")
        mirror.setReflection(Color(0.699999988079071, 0.699999988079071, 0.699999988079071))
        mirror.setup(api)
        var glass: GlassShaderParameter! = GlassShaderParameter("Glass")
        glass.setEta(1.60000002384186)
        glass.setAbsorptionColor(Color(1, 1, 1))
        glass.setup(api)
        //  Lights
        var lightParameter: CornellBoxLightParameter! = CornellBoxLightParameter()
        lightParameter.setName("cornell-box-light")
        lightParameter.setMin(Point3(-60, -60, 0))
        lightParameter.setMax(Point3(60, 60, 100))
        lightParameter.setLeft(Color(0.800000011920929, 0.25, 0.25))
        lightParameter.setRight(Color(0.25, 0.25, 0.800000011920929))
        lightParameter.setTop(Color(0.699999988079071, 0.699999988079071, 0.699999988079071))
        lightParameter.setBottom(Color(0.699999988079071, 0.699999988079071, 0.699999988079071))
        lightParameter.setBack(Color(0.699999988079071, 0.699999988079071, 0.699999988079071))
        lightParameter.setRadiance(Color(15, 15, 15))
        lightParameter.setSamples(32)
        lightParameter.setup(api)
        var mirrorBox: BoxParameter! = BoxParameter()
        mirrorBox.setName("mirror-box")
        mirrorBox.setMin(Point3(-50, 10, 0))
        mirrorBox.setMax(Point3(-10, 50, 40))
        mirrorBox.shaders(mirror)
        mirrorBox.setup(api)
        var glassBox: BoxParameter! = BoxParameter()
        glassBox.setName("glass-box")
        glassBox.setMin(Point3(8, -22, 0))
        glassBox.setMax(Point3(48, 22, 40))
        glassBox.shaders(glass)
        glassBox.setup(api)
        finalRender(api)
 
        return scene
    }

    static func previewRender(_ api: SunflowAPI!) {
        API.shared.parameter("sampler", "ipr")
        API.shared.options(SunflowAPI.DEFAULT_OPTIONS)
        API.shared.render(SunflowAPI.DEFAULT_OPTIONS, nil)
    }

    static func finalRender(_ api: SunflowAPI!) {
        API.shared.parameter("sampler", "bucket")
        API.shared.options(SunflowAPI.DEFAULT_OPTIONS)
        API.shared.render(SunflowAPI.DEFAULT_OPTIONS, nil)
    }
}
*/
